{"version":3,"sources":["utils/fetchClient.ts","types/Filter.ts","api/todos.ts","api/users.ts","components/Auth/AuthForm.tsx","components/Auth/AuthContext.tsx","components/ErrorMessage.tsx","utils/functions.ts","components/Filter.tsx","types/Errors.tsx","components/Footer.tsx","components/NewTodoForm.tsx","components/Todo.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","FilterBy","client","remove","id","updatingData","getUserByEmail","email","a","users","createUser","name","AuthForm","onLogin","useState","setEmail","setName","needToRegister","setNeedToRegister","loading","setIsLoading","errorMessage","setErrorMessage","saveUser","user","localStorage","setItem","useEffect","userData","getItem","parse","error","loadUser","handleSubmit","event","preventDefault","onSubmit","className","htmlFor","classNames","type","placeholder","disabled","value","required","onChange","e","target","minLength","AuthContext","React","createContext","AuthProvider","children","setUser","Provider","ErrorMessage","setHideError","hideError","setError","timer","window","clearInterval","length","data-cy","hidden","aria-label","onClick","getCompletedTodos","todos","filter","completed","Filter","tabs","selectedTabId","onTabSelected","selectedTab","useMemo","find","tab","handelClick","map","href","selected","title","Footer","setTodos","setToggleAll","notCompleted","completedTodos","handlerClick","useCallback","completedTodo","forEach","todo","errorFromServer","DeleteError","NewTodoForm","newTodoField","newTodoTitle","setNewTodoTitle","setTempTitle","isLoading","current","focus","handlerInput","trim","TitleError","newTitle","inputUserId","userId","newTodosFromUser","state","AddError","ref","TodoInfo","setSelectedTodoId","selectedTodoId","isDoubleClick","setIsDoubleClick","setNewTitle","useRef","removeTodo","removeId","handlerCheck","updateId","currentTodo","upDate","UpdateError","escFunction","key","saveData","checked","onBlur","onKeyDown","onDoubleClick","TodoList","temp","tempTitle","defaultChecked","App","useContext","setSelectedTabId","toggleAll","todosFromServer","fetchData","resultTodo","Active","Completed","getFilteredTodo","todosFromList","active","Root","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.f52fcb7a.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export interface FilterTypes {\n  id: string,\n  title: string,\n}\n\nexport enum FilterBy {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const post = (newTitle: string, inputUserId: number) => {\n  return client.post<Todo>('/todos',\n    {\n      title: newTitle,\n      userId: inputUserId,\n      completed: false,\n    });\n};\n\nexport const remove = (id: number) => {\n  return client.delete(`/todos/${id}`);\n};\n\nexport const updatingData = (id: number, data: Partial<Todo>) => {\n  return client.patch<Todo>(`/todos/${id}`,\n    data);\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\ntype UserData = Pick<User, 'name' | 'email'>;\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { createUser, getUserByEmail } from '../../api/users';\nimport { User } from '../../types/User';\n\nexport type Props = {\n  onLogin: (user: User) => void,\n};\n\nexport const AuthForm: React.FC<Props> = ({ onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [needToRegister, setNeedToRegister] = useState(false);\n  const [loading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const saveUser = (user: User) => {\n    localStorage.setItem('user', JSON.stringify(user));\n    onLogin(user);\n  };\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n\n    if (!userData) {\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userData) as User;\n\n      onLogin(user);\n    } catch (error) {\n      // Need to login\n    }\n  }, []);\n\n  const loadUser = async () => {\n    const user = await getUserByEmail(email);\n\n    if (user) {\n      saveUser(user);\n    } else {\n      setNeedToRegister(true);\n    }\n  };\n\n  const registerUser = () => {\n    return createUser({ name, email })\n      .then(saveUser);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrorMessage('');\n    setIsLoading(true);\n\n    try {\n      if (needToRegister) {\n        await registerUser();\n      } else {\n        await loadUser();\n      }\n    } catch (error) {\n      setErrorMessage('Something went wrtong');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"box mt-5\">\n      <h1 className=\"title is-3\">\n        {needToRegister ? 'You need to register' : 'Log in to open todos'}\n      </h1>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"user-email\">\n          Email\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'is-loading': loading,\n          })}\n        >\n          <input\n            type=\"email\"\n            id=\"user-email\"\n            className={classNames('input', {\n              'is-danger': !needToRegister && errorMessage,\n            })}\n            placeholder=\"Enter your email\"\n            disabled={loading || needToRegister}\n            value={email}\n            required\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n        </div>\n\n        {!needToRegister && errorMessage && (\n          <p className=\"help is-danger\">{errorMessage}</p>\n        )}\n      </div>\n\n      {needToRegister && (\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"user-name\">\n            Your Name\n          </label>\n\n          <div\n            className={classNames('control has-icons-left', {\n              'is-loading': loading,\n            })}\n          >\n            <input\n              type=\"text\"\n              id=\"user-name\"\n              className={classNames('input', {\n                'is-danger': needToRegister && errorMessage,\n              })}\n              placeholder=\"Enter your name\"\n              required\n              minLength={4}\n              disabled={loading}\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n          </div>\n\n          {needToRegister && errorMessage && (\n            <p className=\"help is-danger\">{errorMessage}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"field\">\n        <button\n          type=\"submit\"\n          className={classNames('button is-primary', {\n            'is-loading': loading,\n          })}\n        >\n          {needToRegister ? 'Register' : 'Login'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { AuthForm } from './AuthForm';\n\nexport const AuthContext = React.createContext<User | null>(null);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AuthProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!user) {\n    return <AuthForm onLogin={setUser} />;\n  }\n\n  return (\n    <AuthContext.Provider value={user}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","/* eslint-disable react/react-in-jsx-scope */\nimport classNames from 'classnames';\nimport { useEffect } from 'react';\n\ninterface Props {\n  error: string,\n  setHideError: (value: boolean) => void,\n  hideError: boolean,\n  setError: (value: string) => void\n}\n\nexport const ErrorMessage: React.FC<Props> = ({\n  error,\n  setHideError,\n  hideError,\n  setError,\n}) => {\n  useEffect(() => {\n    const timer = window.setTimeout(() => setError(''), 3000);\n\n    return () => {\n      window.clearInterval(timer);\n    };\n  }, [error]);\n\n  return (\n    <>\n      {error.length > 0 && (\n        <div\n          data-cy=\"ErrorNotification\"\n          className={\n            classNames(\n              'notification is-danger is-light has-text-weight-normal',\n              {\n                hidden: hideError,\n              },\n            )\n          }\n        >\n          <button\n            data-cy=\"HideErrorButton\"\n            type=\"button\"\n            aria-label=\"delete\"\n            className=\"delete\"\n            onClick={() => setHideError(true)}\n          />\n          {error}\n        </div>\n      )}\n    </>\n  );\n};\n","import { FilterTypes, FilterBy } from '../types/Filter';\nimport { Todo } from '../types/Todo';\n\nexport function getFilteredTodo(\n  todos: Todo[],\n  selectedTab: FilterTypes,\n) {\n  const filterByType = todos.filter((todo) => {\n    switch (selectedTab.id) {\n      case FilterBy.Active:\n        return !todo.completed;\n\n      case FilterBy.Completed:\n        return todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n\n  return filterByType;\n}\n\nexport function getCompletedTodos(todos: Todo[]) {\n  return todos.filter(({ completed }) => completed);\n}\n","import classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { FilterTypes } from '../types/Filter';\n\ninterface Props {\n  tabs: FilterTypes[],\n  selectedTabId: string,\n  onTabSelected: (value: FilterTypes) => void,\n}\nexport const Filter: React.FC<Props> = ({\n  tabs,\n  selectedTabId,\n  onTabSelected,\n}) => {\n  const selectedTab = useMemo(() => {\n    return tabs.find(tab => tab.id === selectedTabId) || tabs[0];\n  }, [selectedTabId, tabs]);\n\n  const handelClick = useMemo(() => {\n    return (tab: FilterTypes) => {\n      if (selectedTabId !== tab.id) {\n        onTabSelected(tab);\n      }\n    };\n  }, [selectedTabId, tabs]);\n\n  return (\n    <nav className=\"filter\" data-cy=\"Filter\">\n      {tabs.map((tab: FilterTypes) => (\n        <a\n          key={tab.id}\n          href={`#${tab.id}`}\n          data-cy=\"FilterLinkAll\"\n          className={classNames('filter__link',\n            {\n              selected: tab.id === selectedTab.id,\n            })}\n          onClick={() => handelClick(tab)}\n        >\n          {tab.title}\n        </a>\n\n      ))}\n    </nav>\n  );\n};\n","export enum ErrorMessage {\n  TitleError = 'Title can\\'t be empty',\n  AddError = 'Unable to add a todo',\n  DeleteError = 'Unable to delete a todo',\n  UpdateError = 'Unable to update a todo',\n}\n","import React, { useCallback, useMemo } from 'react';\nimport { remove } from '../api/todos';\nimport { FilterTypes } from '../types/Filter';\nimport { Todo } from '../types/Todo';\nimport { getCompletedTodos } from '../utils/functions';\nimport { Filter } from './Filter';\nimport { ErrorMessage } from '../types/Errors';\n\ninterface Props {\n  todos: Todo[],\n  tabs: FilterTypes[],\n  selectedTabId: string,\n  setError: (value: string) => void,\n  setTodos: (value: Todo[]) => void,\n  setToggleAll: (value: boolean) => void;\n  onTabSelected: (value: FilterTypes) => void,\n}\n\nexport const Footer: React.FC<Props> = ({\n  todos,\n  tabs,\n  selectedTabId,\n  setTodos,\n  setError,\n  setToggleAll,\n  onTabSelected,\n}) => {\n  const notCompleted = useMemo(() => {\n    return todos.filter(({ completed }) => !completed);\n  }, [todos]);\n\n  const completedTodos = useMemo(() => {\n    return getCompletedTodos(todos);\n  }, [todos]);\n\n  if (completedTodos.length === todos.length) {\n    setToggleAll(true);\n  } else {\n    setToggleAll(false);\n  }\n\n  const handlerClick = useCallback(async (completedTodo: Todo[]) => {\n    try {\n      completedTodo.forEach(async (todo) => {\n        await remove(todo.id);\n      });\n\n      setTodos([...notCompleted]);\n    } catch (errorFromServer) {\n      setError(ErrorMessage.DeleteError);\n    }\n  }, [completedTodos.length]);\n\n  return (\n    <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${notCompleted.length} items left`}\n      </span>\n\n      <Filter\n        tabs={tabs}\n        selectedTabId={selectedTabId}\n        onTabSelected={onTabSelected}\n      />\n      <button\n        data-cy=\"ClearCompletedButton\"\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        onClick={() => handlerClick(completedTodos)}\n      >\n        {completedTodos.length > 0 && 'Clear completed'}\n      </button>\n    </footer>\n  );\n};\n","/* eslint-disable react/react-in-jsx-scope */\nimport { RefObject, useCallback, useEffect } from 'react';\nimport { post } from '../api/todos';\nimport { Todo } from '../types/Todo';\nimport { User } from '../types/User';\nimport { ErrorMessage } from '../types/Errors';\n\ninterface Props {\n  newTodoField: RefObject<HTMLInputElement>;\n  newTodoTitle: string;\n  setNewTodoTitle: (value: string) => void;\n  setError: (value: string) => void\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  setIsLoading: (value: boolean) => void,\n  setTempTitle: (value: string) => void,\n  user: User | null,\n  isLoading: boolean;\n}\nexport const NewTodoForm: React.FC<Props> = ({\n  newTodoField,\n  newTodoTitle,\n  setNewTodoTitle,\n  setError,\n  setTodos,\n  setIsLoading,\n  setTempTitle,\n  user,\n  isLoading,\n}) => {\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, []);\n\n  const handlerInput = useCallback((\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setNewTodoTitle(event.target.value);\n    setTempTitle(event.target.value);\n  }, []);\n\n  const onSubmit = useCallback(\n    async (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      if (newTodoTitle.trim().length === 0) {\n        setError(ErrorMessage.TitleError);\n\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        if (user) {\n          const newTodosFromUser: Todo = await post(newTodoTitle, user?.id);\n\n          setTodos((state: Todo[]) => [...state, newTodosFromUser]);\n        }\n      } catch (errorFromServer) {\n        setError(ErrorMessage.AddError);\n      } finally {\n        setIsLoading(false);\n        setNewTodoTitle('');\n      }\n    }, [newTodoTitle],\n  );\n\n  return (\n    <form\n      onSubmit={onSubmit}\n    >\n      <input\n        data-cy=\"NewTodoField\"\n        type=\"text\"\n        ref={newTodoField}\n        value={newTodoTitle}\n        className=\"todoapp__new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={handlerInput}\n        disabled={isLoading}\n      />\n    </form>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { remove, updatingData } from '../api/todos';\nimport { Todo } from '../types/Todo';\nimport { ErrorMessage } from '../types/Errors';\n\ninterface Props {\n  completed: boolean,\n  title: string;\n  id: number;\n  setError: (value: string) => void,\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  todos: Todo[],\n  setSelectedTodoId: (value: number) => void,\n  selectedTodoId: number | null,\n}\n\nexport const TodoInfo: React.FC<Props> = ({\n  completed,\n  title,\n  id,\n  setTodos,\n  setError,\n  todos,\n  setSelectedTodoId,\n  selectedTodoId,\n}) => {\n  const [isDoubleClick, setIsDoubleClick] = useState(false);\n  const [newTitle, setNewTitle] = useState(title);\n\n  const newTodoField = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [isDoubleClick]);\n\n  const removeTodo = useCallback(async (removeId: number) => {\n    setSelectedTodoId(removeId);\n    try {\n      await remove(removeId);\n\n      setTodos((state: Todo[]) => [...state]\n        .filter(todo => todo.id !== removeId));\n    } catch (errorFromServer) {\n      setError(ErrorMessage.DeleteError);\n    } finally {\n      setSelectedTodoId(0);\n    }\n  }, [id]);\n\n  const handlerCheck = useCallback(async (updateId: number) => {\n    setSelectedTodoId(updateId);\n    try {\n      const currentTodo = todos.find(todo => todo.id === updateId);\n      const upDate = await updatingData(\n        updateId,\n        { completed: !currentTodo?.completed },\n      );\n\n      setTodos((state: Todo[]) => [...state].map(todo => {\n        if (todo.id === updateId) {\n          return ({\n            ...upDate,\n          });\n        }\n\n        return todo;\n      }));\n    } catch (errorFromServer) {\n      setError(ErrorMessage.UpdateError);\n    } finally {\n      setSelectedTodoId(0);\n    }\n  }, [id, completed]);\n\n  const handlerInput = useCallback((\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setNewTitle(event.target.value);\n  }, []);\n\n  const escFunction = useCallback((\n    event: React.KeyboardEvent<HTMLInputElement>,\n  ) => {\n    if (event.key === 'Escape') {\n      setIsDoubleClick(false);\n    }\n  }, ['keydown']);\n\n  const saveData = useCallback(async () => {\n    if (newTitle.trim().length === 0) {\n      removeTodo(id);\n    } else {\n      setSelectedTodoId(id);\n      try {\n        const upDate = await updatingData(id, { title: newTitle });\n\n        setTodos((state: Todo[]) => [...state].map(todo => {\n          if (todo.id === id) {\n            return ({\n              ...upDate,\n            });\n          }\n\n          return todo;\n        }));\n      } catch (errorFromServer) {\n        setError(ErrorMessage.UpdateError);\n      } finally {\n        setSelectedTodoId(0);\n        setIsDoubleClick(false);\n      }\n    }\n  }, [newTitle, isDoubleClick]);\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    saveData();\n  };\n\n  return (\n    <div\n      data-cy=\"Todo\"\n      className={classNames(\n        'todo',\n        {\n          completed,\n        },\n      )}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          checked={completed}\n          onChange={() => handlerCheck(id)}\n        />\n      </label>\n\n      {isDoubleClick && (\n        <form\n          onSubmit={onSubmit}\n        >\n          <input\n            data-cy=\"TodoTitleField\"\n            type=\"text\"\n            className=\"todo__title-field\"\n            value={newTitle}\n            onChange={handlerInput}\n            onBlur={saveData}\n            ref={newTodoField}\n            onKeyDown={escFunction}\n          />\n        </form>\n      )}\n\n      {!isDoubleClick && (\n        <span\n          data-cy=\"TodoTitle\"\n          className=\"todo__title\"\n          onDoubleClick={() => setIsDoubleClick(true)}\n        >\n          {title}\n        </span>\n      )}\n      {!isDoubleClick && (\n        <button\n          type=\"button\"\n          className=\"todo__remove\"\n          data-cy=\"TodoDeleteButton\"\n          onClick={() => removeTodo(id)}\n        >\n          ×\n        </button>\n      )}\n\n      <div\n        data-cy=\"TodoLoader\"\n        className={classNames('modal overlay',\n          {\n            'is-active': selectedTodoId === id,\n          })}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable react/react-in-jsx-scope */\nimport { Todo } from '../types/Todo';\nimport { TodoInfo } from './Todo';\n\ninterface Props {\n  todos: Todo[];\n  setError: (value: string) => void,\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n  isLoading: boolean,\n  setSelectedTodoId: (value: number) => void,\n  selectedTodoId: number | null,\n  tempTitle: string,\n\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setError,\n  setTodos,\n  isLoading,\n  setSelectedTodoId,\n  selectedTodoId,\n  tempTitle,\n}) => {\n  const temp = {\n    id: 0,\n    title: tempTitle,\n  };\n\n  return (\n    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n      {todos.map(({ id, completed, title }) => (\n        <TodoInfo\n          key={id}\n          title={title}\n          completed={completed}\n          id={id}\n          setError={setError}\n          setTodos={setTodos}\n          todos={todos}\n          selectedTodoId={selectedTodoId}\n          setSelectedTodoId={setSelectedTodoId}\n        />\n      ))}\n      {isLoading\n        && (\n          <div\n            data-cy=\"Todo\"\n            className=\"todo\"\n          >\n            <label className=\"todo__status-label\">\n              <input\n                data-cy=\"TodoStatus\"\n                type=\"checkbox\"\n                className=\"todo__status\"\n                defaultChecked\n              />\n            </label>\n\n            <span data-cy=\"TodoTitle\" className=\"todo__title\">\n              {temp.title}\n            </span>\n            <div\n              data-cy=\"TodoLoader\"\n              className=\"modal overlay is-active\"\n            >\n              <div className=\"modal-background has-background-white-ter\" />\n              <div className=\"loader\" />\n            </div>\n          </div>\n        )}\n    </section>\n  );\n};\n","import classNames from 'classnames';\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { getTodos, updatingData } from './api/todos';\nimport { AuthContext } from './components/Auth/AuthContext';\nimport { ErrorMessage } from './components/ErrorMessage';\nimport { Footer } from './components/Footer';\nimport { NewTodoForm } from './components/NewTodoForm';\nimport { TodoList } from './components/TodoList';\nimport { FilterTypes } from './types/Filter';\nimport { Todo } from './types/Todo';\nimport { getFilteredTodo, getCompletedTodos } from './utils/functions';\n\nexport const tabs: FilterTypes[] = [\n  { id: '', title: 'All' },\n  { id: 'active', title: 'Active' },\n  { id: 'completed', title: 'Completed' },\n];\n\nexport const App: React.FC = () => {\n  const user = useContext(AuthContext);\n  const newTodoField = useRef<HTMLInputElement>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [error, setError] = useState('');\n  const [hideError, setHideError] = useState(false);\n  const [selectedTabId, setSelectedTabId] = useState(tabs[0].id);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [tempTitle, setTempTitle] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n  const [toggleAll, setToggleAll] = useState(false);\n\n  const onTabSelected = (tab: FilterTypes) => {\n    setSelectedTabId(tab.id);\n  };\n\n  const selectedTab = useMemo(() => {\n    return tabs.find(tab => tab.id === selectedTabId) || tabs[0];\n  }, [selectedTabId]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (user) {\n          const todosFromServer = await getTodos(user?.id);\n\n          setIsLoading(false);\n\n          setTodos(todosFromServer);\n        }\n      } catch (errorFromServer) {\n        setError(`${errorFromServer}`);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const resultTodo = useMemo(() => {\n    return getFilteredTodo(todos, selectedTab);\n  }, [todos, selectedTab]);\n\n  const completedTodos = useMemo(() => {\n    return getCompletedTodos(todos);\n  }, [todos]);\n\n  const handlerClick = useCallback((todosFromList: Todo[]) => {\n    try {\n      todosFromList.map(async todo => {\n        if (completedTodos.length === todos.length) {\n          await updatingData(todo.id, { completed: false });\n          setToggleAll(false);\n        } else {\n          await updatingData(todo.id, { completed: true });\n        }\n      });\n\n      setTodos((state) => [...state].map(todo => {\n        if (completedTodos.length === todos.length) {\n          return ({\n            ...todo,\n            completed: false,\n          });\n        }\n\n        return ({\n          ...todo,\n          completed: true,\n        });\n      }));\n    } catch (errorFromServer) {\n      setError('Unable to update a todo');\n    }\n  }, [todos, completedTodos]);\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <header className=\"todoapp__header\">\n          <button\n            data-cy=\"ToggleAllButton\"\n            type=\"button\"\n            aria-label=\"ToggleAllButton\"\n            className={classNames('todoapp__toggle-all',\n              {\n                active: toggleAll,\n              })}\n            onClick={() => handlerClick(todos)}\n          />\n\n          <NewTodoForm\n            newTodoField={newTodoField}\n            newTodoTitle={newTodoTitle}\n            setNewTodoTitle={setNewTodoTitle}\n            setError={setError}\n            setTodos={setTodos}\n            setIsLoading={setIsLoading}\n            setTempTitle={setTempTitle}\n            user={user}\n            isLoading={isLoading}\n          />\n        </header>\n        {todos.length > 0\n          && (\n            <>\n              <TodoList\n                todos={resultTodo}\n                setTodos={setTodos}\n                setError={setError}\n                isLoading={isLoading}\n                selectedTodoId={selectedTodoId}\n                setSelectedTodoId={setSelectedTodoId}\n                tempTitle={tempTitle}\n              />\n\n              <Footer\n                tabs={tabs}\n                selectedTabId={selectedTabId}\n                todos={todos}\n                setTodos={setTodos}\n                setError={setError}\n                setToggleAll={setToggleAll}\n                onTabSelected={onTabSelected}\n              />\n            </>\n          )}\n\n      </div>\n\n      <ErrorMessage\n        error={error}\n        setHideError={setHideError}\n        hideError={hideError}\n        setError={setError}\n      />\n    </div>\n  );\n};\n","/* eslint-disable react/react-in-jsx-scope */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\nimport { AuthProvider } from './components/Auth/AuthContext';\n\nconst Root = () => (\n  <AuthProvider>\n    <App />\n  </AuthProvider>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}